from base64 import encode as base64_encode
from fiber import CancelledError
from fiber import Fiber
from fiber import Queue
from net.stcp.client import Client as StcpClient
from net.tcp.client import Client as TcpClient
from random.pseudo import randbytes
from . import WebsocketError
from .common import HEADER_FIN
from .common import HEADER_MASK
from .common import OpCode
from .server import Server

class _ClosedError(Error):
    pass

trait _Io:

    func write(self, data: bytes):
        pass

    func read(self, size: u64) -> bytes:
        pass

class _TcpIo(_Io):
    client: TcpClient

    func write(self, data: bytes):
        self.client.write(data)

    func read(self, size: u64) -> bytes:
        return self.client.read(size)

class _StcpIo(_Io):
    client: StcpClient

    func write(self, data: bytes):
        self.client.write(data)

    func read(self, size: u64) -> bytes:
        return self.client.read(size)

trait Handler:
    """All methods are called from the client's reader fiber.

    """

    func on_binary(self, data: bytes):
        """Called when a binary message has been received from the server.

        """

    func on_text(self, data: string):
        """Called when a text message has been received from the server.

        """

class _DefaultHandler(Handler):
    _binary_queue: Queue[bytes]
    _text_queue: Queue[string]

    func __init__(self, binary_queue: Queue[bytes], text_queue: Queue[string]):
        self._binary_queue = binary_queue
        self._text_queue = text_queue

    func on_binary(self, data: bytes):
        self._binary_queue.put(data)

    func on_text(self, data: string):
        self._text_queue.put(data)

func _send_frame(io: _Io, data: bytes, op_code: OpCode):
    header = b""
    data_size = len(data)
    header += (HEADER_FIN | u8(op_code))

    if data_size < 126:
        header += (HEADER_MASK | u8(data_size))
    elif data_size < 65536:
        header += (HEADER_MASK | 126)
        header += u8((data_size >> 8) & 0xff)
        header += u8((data_size >> 0) & 0xff)
    else:
        header += (HEADER_MASK | 127)
        header += 0
        header += 0
        header += 0
        header += 0
        header += u8((data_size >> 24) & 0xff)
        header += u8((data_size >> 16) & 0xff)
        header += u8((data_size >>  8) & 0xff)
        header += u8((data_size >>  0) & 0xff)

    header += 0
    header += 0
    header += 0
    header += 0

    io.write(header)
    io.write(data)

class _ReaderFiber(Fiber):
    _io: _Io
    _handler: Handler
    _data_op_code: OpCode
    _data: bytes

    func __init__(self, handler: Handler, io: _Io):
        self._handler = handler
        self._io = io
        self._data = None

    func _tcp_read(self, size: u64) -> bytes:
        data = self._io.read(size)

        if len(data) != size:
            raise _ClosedError()

        return data

    func _read_frame(self) -> (OpCode, bytes, bool):
        header = self._tcp_read(2)
        op_code = OpCode(header[0] & ~HEADER_MASK)
        fin = (header[0] & HEADER_FIN) == HEADER_FIN
        masked = (header[1] & HEADER_MASK) == HEADER_MASK
        data_size = u64(header[1] & ~HEADER_MASK)

        if data_size == 126:
            header = self._tcp_read(2)
            data_size = (u64(header[0]) << 8 | u64(header[1]))
        elif data_size == 127:
            header = self._tcp_read(8)
            data_size = ((u64(header[4]) << 24)
                         | (u64(header[5]) << 16)
                         | (u64(header[6]) << 8)
                         | u64(header[7]))

        if masked:
            raise NotImplementedError()

        data = self._tcp_read(data_size)

        return op_code, data, fin

    func _handle_close(self):
        print("Close.")

    func _handle_ping(self, data: bytes):
        _send_frame(self._io, data, OpCode.Pong)

    func _handle_pong(self):
        pass

    func _handle_data(self, op_code: OpCode, data: bytes, fin: bool):
        if self._data is None:
            self._data_op_code = op_code
            self._data = data
        elif op_code == OpCode.Continuation:
            self._data += data
        else:
            self._data = None
            return

        if not fin:
            return

        match self._data_op_code:
            case OpCode.Text:
                self._handler.on_text(string(self._data))
            case OpCode.Binary:
                self._handler.on_binary(self._data)

        self._data = None

    func _run(self):
        while True:
            op_code, data, fin = self._read_frame()

            match op_code:
                case OpCode.Close:
                    self._handle_close()
                case OpCode.Ping:
                    self._handle_ping(data)
                case OpCode.Pong:
                    self._handle_pong()
                case _:
                    self._handle_data(op_code, data, fin)

    func run(self):
        try:
            self._run()
        except _ClosedError:
            self._handler.on_binary(None)
            self._handler.on_text(None)
        except CancelledError:
            pass

class Client:
    """A websocket client, used to communicate with a websocket server.

    """

    _handler: Handler
    _tcp_client: TcpClient
    _reader_fiber: _ReaderFiber
    _binary_queue: Queue[bytes]
    _text_queue: Queue[string]
    _stcp_client: StcpClient
    _secure: bool
    _io: _Io

    func __init__(self, handler: Handler = None, secure: bool = False):
        """Create a client. Give `handler` as ``None``` to use the default
        handler which puts received messages on message queues that
        are read from with the `receive_binary()` and `receive_text()`
        methods.

        """

        if handler is None:
            # ToDo: Assign to self._binary_queue directly when Mys
            #       supports it.
            binary_queue = Queue[bytes]()
            text_queue = Queue[string]()
            handler = _DefaultHandler(binary_queue, text_queue)
            self._binary_queue = binary_queue
            self._text_queue = text_queue
        else:
            self._binary_queue = None
            self._text_queue = None

        self._handler = handler
        self._secure = secure

        if secure:
            self._stcp_client = StcpClient()
            self._io = _StcpIo(self._stcp_client)
        else:
            self._tcp_client = TcpClient()
            self._io = _TcpIo(self._tcp_client)

    func _read_line(self) -> string:
        line = b""

        while True:
            byte = self._io.read(1)

            if len(byte) != 1:
                raise WebsocketError("Handshake failed.")

            line += byte

            if len(line) < 2:
                continue

            if line[-2] == u8('\r') and line[-1] == u8('\n'):
                break

        return string(line)[:-2]

    @raises(NetError, WebsocketError)
    func connect(self, host: string, port: u32, path: string = "/"):
        """Connect to the server identified by given `host` and
        `port`. Non-secure websockets normally use port 80, while
        secure use port 443.

        `path` in the path as sent in the HTTP request to the
        server. For example "/info/299?name=Kalle&date=2021-03-01".

        """

        if self._secure:
            self._stcp_client.connect(host, port)
        else:
            self._tcp_client.connect(host, port)

        sec_websocket_key = base64_encode(randbytes(16))
        self._io.write(f"GET {path} HTTP/1.1\r\n"
                       f"Host: {host}\r\n"
                       "Upgrade: WebSocket\r\n"
                       "Connection: Upgrade\r\n"
                       f"Sec-WebSocket-Key: {sec_websocket_key}\r\n"
                       "Origin: MysWebSocketClient\r\n"
                       "Sec-WebSocket-Version: 13\r\n"
                       "\r\n".to_utf8())

        while True:
            line = self._read_line()

            if line == "":
                break

        self._reader_fiber = _ReaderFiber(self._handler, self._io)
        self._reader_fiber.start()

    func disconnect(self):
        """Disconnect from the server.

        """

        self._reader_fiber.cancel()
        self._reader_fiber.join()

        if self._secure:
            self._stcp_client.disconnect()
        else:
            self._tcp_client.disconnect()

    func send_binary(self, data: bytes):
        """Send `data` to the server as a binary message.

        This method never blocks, but instead enqueues the message if
        the OS would block the write.

        """

        _send_frame(self._io, data, OpCode.Binary)

    func send_text(self, data: string):
        """Send `data` to the server as a text message.

        This method never blocks, but instead enqueues the message if
        the OS would block the write.

        """

        _send_frame(self._io, data.to_utf8(), OpCode.Text)

    func receive_binary(self) -> bytes:
        """Receive a binary message from the server. This method can only be
        used if no handler was passed to __init__(). Returns ``None``
        if disconnected.

        """

        return self._binary_queue.get()

    func receive_text(self) -> string:
        """Receive a text message from the server. This method can only be
        used if no handler was passed to __init__(). Returns ``None``
        if disconnected.

        """

        return self._text_queue.get()

class _ConnectionFiber(Fiber):
    server: Server

    func run(self):
        client = self.server.accept()
        assert client.is_connected()
        client.send_text("Hi!")

@test
func test_connection():
    port: u32 = 60101

    server = Server()
    server.listen(port)
    server_fiber = _ConnectionFiber(server)
    server_fiber.start()

    client = Client()
    client.connect("localhost", port)
    assert client.receive_text() == "Hi!"
    client.disconnect()

    server_fiber.join()
