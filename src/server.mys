from fiber import Fiber
from net.tcp.server import Client as TcpClient
from net.tcp.server import Server as TcpServer
from .errors import WebsocketError

class Client:
    """An accepted websocket client.

    `path` is the path received in the HTTP request from the client.

    """

    path: string
    _tcp_client: TcpClient

    def __init__(self, tcp_client: TcpClient):
        self.path = None
        self._tcp_client = tcp_client

        # ToDo: Perform handshake.

    def send_binary(self, data: bytes):
        """Send given data to the client as a binary message.

        """

        raise NotImplementedError()

    def send_text(self, data: string):
        """Send given data to the client as a text message.

        """

        raise NotImplementedError()

    def receive_binary(self) -> bytes:
        """Receive a binary message from the client. Returns None if
        disconnected.

        """

        raise NotImplementedError()

    def receive_text(self) -> string:
        """Receive a text message from the client. Returns None if
        disconnected.

        """

        raise NotImplementedError()

class Server:
    """A websocket server, used to communicate with websocket clients.

    """

    _tcp_server: TcpServer

    def __init__(self):
        self._tcp_server = TcpServer()

    def listen(self, port: u32):
        """Start listening for clients to connect to given `port` on any
        interface.

        """

        self._tcp_server.listen(port)

    def accept(self) -> Client:
        """Wait for a client to connect and accept it.

        """

        return Client(self._tcp_server.accept())
